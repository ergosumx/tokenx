name: .NET Tests & Integration

on:
  push:
    branches: [main, master, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'src/ErgoX.Vecrax.ML.NLP.Tokenizers.Rust.Bridge/**'
      - '.github/workflows/test-dotnet.yml'
  pull_request:
    branches: [main, master, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'src/ErgoX.Vecrax.ML.NLP.Tokenizers.Rust.Bridge/**'
      - '.github/workflows/test-dotnet.yml'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =======================
  # Build Rust Library
  # =======================
  build-rust:
    name: Build Rust Library (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            lib: libtokenx_bridge.so
            runtime: linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            lib: tokenx_bridge.dll
            runtime: win-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            lib: libtokenx_bridge.dylib
            runtime: osx-x64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src/ErgoX.Vecrax.ML.NLP.Tokenizers.Rust.Bridge/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust tests
        working-directory: src/ErgoX.Vecrax.ML.NLP.Tokenizers.Rust.Bridge
        run: cargo test --release --target ${{ matrix.target }}

      - name: Build Rust library
        working-directory: src/ErgoX.Vecrax.ML.NLP.Tokenizers.Rust.Bridge
        run: cargo build --release --target ${{ matrix.target }}

      - name: Copy library to runtime folder (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p src/ErgoX.VecraX.ML.NLP.Tokenizers.HuggingFace/runtimes/${{ matrix.runtime }}/native
          cp src/ErgoX.Vecrax.ML.NLP.Tokenizers.Rust.Bridge/target/${{ matrix.target }}/release/${{ matrix.lib }} \
             src/ErgoX.VecraX.ML.NLP.Tokenizers.HuggingFace/runtimes/${{ matrix.runtime }}/native/

      - name: Copy library to runtime folder (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "src/ErgoX.VecraX.ML.NLP.Tokenizers.HuggingFace/runtimes/${{ matrix.runtime }}/native"
          Copy-Item "src/ErgoX.Vecrax.ML.NLP.Tokenizers.Rust.Bridge/target/${{ matrix.target }}/release/${{ matrix.lib }}" `
                    "src/ErgoX.VecraX.ML.NLP.Tokenizers.HuggingFace/runtimes/${{ matrix.runtime }}/native/"

      - name: Upload runtime library
        uses: actions/upload-artifact@v4
        with:
          name: runtime-${{ matrix.runtime }}
          path: src/ErgoX.VecraX.ML.NLP.Tokenizers.HuggingFace/runtimes/${{ matrix.runtime }}/native/${{ matrix.lib }}
          retention-days: 1

  # =======================
  # .NET Tests
  # =======================
  test-dotnet:
    name: .NET Tests (${{ matrix.os }})
    needs: build-rust
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download runtime libraries
        uses: actions/download-artifact@v4
        with:
          path: src/ErgoX.VecraX.ML.NLP.Tokenizers.HuggingFace/runtimes/
          pattern: runtime-*
          merge-multiple: true

      - name: Restore dependencies
        run: dotnet restore

      - name: Build .NET projects
        run: dotnet build --configuration Release --no-restore

      - name: Run .NET tests
        run: |
          dotnet test --configuration Release --no-build --verbosity normal \
            --logger "trx;LogFileName=test-results.trx" \
            --logger "html;LogFileName=test-results.html" \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            tests/**/TestResults/**/*.trx
            tests/**/TestResults/**/*.html
            tests/**/TestResults/**/*.xml
          retention-days: 30

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET Test Results (${{ matrix.os }})
          path: 'tests/**/TestResults/**/*.trx'
          reporter: dotnet-trx
          fail-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: tests/**/TestResults/**/coverage.opencover.xml
          flags: dotnet-${{ matrix.os }}
          name: dotnet-coverage-${{ matrix.os }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # =======================
  # Test Summary
  # =======================
  test-summary:
    name: Test Summary & Report Generation
    needs: [build-rust, test-dotnet]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          pattern: test-results-*
          merge-multiple: true

      - name: Generate test summary
        run: |
          echo "# 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Tests**: ${{ needs.build-rust.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **.NET Tests**: ${{ needs.test-dotnet.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-rust.result }}" != "success" ] || [ "${{ needs.test-dotnet.result }}" != "success" ]; then
            echo "❌ **Some tests failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload combined test results
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-results
          path: test-results/
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const rustStatus = '${{ needs.build-rust.result }}';
            const dotnetStatus = '${{ needs.test-dotnet.result }}';
            
            const statusEmoji = (status) => status === 'success' ? '✅' : '❌';
            
            const comment = `## 🧪 Test Results\n\n` +
              `| Component | Status | Result |\n` +
              `|-----------|--------|--------|\n` +
              `| Rust C Bindings | ${statusEmoji(rustStatus)} | ${rustStatus} |\n` +
              `| .NET Integration | ${statusEmoji(dotnetStatus)} | ${dotnetStatus} |\n\n` +
              `[View detailed test results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
