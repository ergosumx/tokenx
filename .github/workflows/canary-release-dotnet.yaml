name: TokenX Build & Release - Canary build

on:
  push:
    tags:
      - 'canary-v*'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  canary-release:
    name: Build, Test, and Pack
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download hf-bridge artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: hf-bridge.yml
          workflow_conclusion: success
          path: runtime-artifacts

      - name: Prepare runtime assets
        shell: bash
        run: |
          set -euo pipefail
          RUNTIMES_DIR="src/ErgoX.VecraX.ML.NLP.Tokenizers/HuggingFace/runtimes"
          rm -rf "${RUNTIMES_DIR}"
          mkdir -p "${RUNTIMES_DIR}"
          TEMP_DIR="$(mktemp -d)"

          shopt -s nullglob
          for archive in runtime-artifacts/*; do
            base="$(basename "${archive}")"
            stem="${base}"
            workdir="${TEMP_DIR}/${stem}"

            if [[ "${archive}" == *.tar.gz ]]; then
              stem="${base%.tar.gz}"
              workdir="${TEMP_DIR}/${stem}"
              mkdir -p "${workdir}"
              tar -xzf "${archive}" -C "${workdir}"
            elif [[ "${archive}" == *.zip ]]; then
              stem="${base%.zip}"
              workdir="${TEMP_DIR}/${stem}"
              mkdir -p "${workdir}"
              unzip -oq "${archive}" -d "${workdir}"
            else
              echo "Skipping unsupported artifact ${base}"
              continue
            fi

            case "${stem}" in
              tokenx-bridge-*-x86_64-unknown-linux-gnu)
                dest="linux-x64/native"
                ;;
              tokenx-bridge-*-x86_64-pc-windows-msvc)
                dest="win-x64/native"
                ;;
              tokenx-bridge-*-x86_64-apple-darwin)
                dest="osx-x64/native"
                ;;
              tokenx-bridge-*-aarch64-apple-darwin)
                dest="osx-arm64/native"
                ;;
              tokenx-bridge-*-aarch64-apple-ios)
                dest="ios-arm64/native"
                ;;
              tokenx-bridge-*-aarch64-linux-android)
                dest="android-arm64/native"
                ;;
              tokenx-bridge-*-coverage)
                echo "Skipping coverage artifact ${stem}"
                continue
                ;;
              runtime-*)
                dest="${stem#runtime-}/native"
                ;;
              *)
                echo "Skipping unrecognized artifact ${stem}"
                continue
                ;;
            esac

            mkdir -p "${RUNTIMES_DIR}/${dest}"
            find "${workdir}" -maxdepth 1 -type f -exec cp {} "${RUNTIMES_DIR}/${dest}/" \;
          done

          echo "Resolved runtime assets:"
          find "${RUNTIMES_DIR}" -maxdepth 3 -type f

      - name: Restore .NET dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build TokenX.HF.sln --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test TokenX.HF.sln --configuration Release --no-build --logger "trx" --filter "TestCategories=Unit"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tokenizers huggingface_hub transformers jinja2

      - name: Download test data fixtures
        run: python tests/Py/Huggingface/download_tests_data.py --allow-system-python

      - name: Generate benchmark corpora
        run: python tests/Py/Huggingface/generate_benchmarks.py --allow-system-python

      - name: Run integration tests
        run: dotnet test TokenX.HF.sln --configuration Release --no-build --logger "trx" --filter "TestCategories=Integration"

      - name: Pack NuGet artifacts
        run: dotnet pack src/ErgoX.VecraX.ML.NLP.Tokenizers/ErgoX.VecraX.ML.NLP.Tokenizers.csproj --configuration Release --no-build --output artifacts/nuget

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canary-test-results
          path: tests/**/TestResults/*.trx

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: canary-nuget
          path: artifacts/nuget

