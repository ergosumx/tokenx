name: HuggingFace RC Validation

on:
  workflow_run:
    workflows:
      - HuggingFace Bridge Artifacts
    types:
      - completed

permissions:
  contents: read
  actions: read
  packages: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CI: true

jobs:
  validate-and-pack:
    name: Validate & Pack HuggingFace RC
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install 7-Zip
        run: sudo apt-get update && sudo apt-get install -y p7zip-full

      - name: Restore test artifacts
        shell: bash
        run: |
          set -eo pipefail
          7z x tests/__templates.7z -otests/__templates -aoa
          7z x tests/_huggingface.7z -otests/_huggingface -aoa

      - name: Resolve bridge version
        id: resolve_version
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const tagPrefix = 'hf-v';
            if (run.head_branch && run.head_branch.startsWith(tagPrefix)) {
              const version = run.head_branch.substring(tagPrefix.length);
              core.info(`Resolved version from head branch: ${version}`);
              core.setOutput('version', version);
              return;
            }

            const { owner, repo } = context.repo;
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: run.id,
              per_page: 100
            });

            const coverage = artifacts.data.artifacts.find(item => item.name.startsWith('tokenx-bridge-') && item.name.endsWith('-coverage'));
            if (!coverage) {
              core.setFailed('Unable to derive version from workflow run artifacts.');
              return;
            }

            const prefix = 'tokenx-bridge-';
            const suffix = '-coverage';
            const version = coverage.name.substring(prefix.length, coverage.name.length - suffix.length);
            core.info(`Resolved version from coverage artifact: ${version}`);
            core.setOutput('version', version);

      - name: Derive RC version
        id: rc_version
        shell: bash
        run: |
          set -eo pipefail
          BASE_VERSION="${{ steps.resolve_version.outputs.version }}"
          if [ -z "$BASE_VERSION" ]; then
            echo "Base version is empty." >&2
            exit 1
          fi

          RC_VERSION="${BASE_VERSION}-rc.${GITHUB_RUN_NUMBER}"
          echo "base=$BASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "rc=$RC_VERSION" >> "$GITHUB_OUTPUT"
          echo "Resolved RC version: $RC_VERSION"

      - name: Restore dependencies
        run: dotnet restore TokenX.sln --nologo

      - name: Build HuggingFace library
        run: dotnet build src/HuggingFace/ErgoX.TokenX.HuggingFace.csproj --configuration Release --no-restore --nologo /p:ContinuousIntegrationBuild=true

      - name: Prepare artifact staging
        run: |
          mkdir -p artifacts/TestResults
          mkdir -p artifacts/coverage
          mkdir -p artifacts/packages

      - name: Run HuggingFace tests with coverage
        run: dotnet test tests/ErgoX.TokenX.HuggingFace.Tests/ErgoX.TokenX.HuggingFace.Tests.csproj --configuration Release --no-build --results-directory artifacts/TestResults --collect:"XPlat Code Coverage"

      - name: Consolidate coverage report
        id: coverage
        shell: bash
        run: |
          set -eo pipefail
          COVERAGE_FILE=$(find artifacts/TestResults -name 'coverage.cobertura.xml' | head -n 1)
          if [ -z "$COVERAGE_FILE" ]; then
            echo "Coverage file not found." >&2
            exit 1
          fi

          cp "$COVERAGE_FILE" artifacts/coverage/ErgoX.TokenX.HuggingFace.coverage.cobertura.xml

      - name: Pack HuggingFace NuGet
        run: dotnet pack src/HuggingFace/ErgoX.TokenX.HuggingFace.csproj --configuration Release --no-build --output artifacts/packages /p:PackageVersion=${{ steps.rc_version.outputs.rc }} /p:Version=${{ steps.rc_version.outputs.rc }} /p:ContinuousIntegrationBuild=true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: hf-rc-test-results-${{ steps.rc_version.outputs.base }}
          path: artifacts/TestResults
          if-no-files-found: error

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: hf-rc-coverage-${{ steps.rc_version.outputs.base }}
          path: artifacts/coverage
          if-no-files-found: error

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: hf-rc-packages-${{ steps.rc_version.outputs.rc }}
          path: artifacts/packages
          if-no-files-found: error
