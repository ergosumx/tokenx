name: Build Multi-Platform SentencePiece

on:
  push:
    tags:
      - 'sp-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number without the sp- prefix (optional for manual runs)'
        required: false
        type: string

env:
  CMAKE_BUILD_TYPE: Release
  BUILD_SHARED_LIBS: ON
  SENTENCEPIECE_DIR: .ext/sentencepiece

jobs:
  prepare:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.resolve-version.outputs.version }}
    steps:
      - name: Resolve release version
        id: resolve-version
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          set -euo pipefail
          version="${INPUT_VERSION}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            if [[ "${GITHUB_REF_NAME}" == sp-* ]]; then
              version="${GITHUB_REF_NAME#sp-}"
            else
              echo "Tag ${GITHUB_REF_NAME} is not prefixed with sp-." >&2
              exit 1
            fi
          fi

          if [[ -z "${version}" ]]; then
            echo "Version must be provided via sp-* tag or manual input." >&2
            exit 1
          fi

          if [[ "${version}" != v* ]]; then
            version="v${version}"
          fi

          echo "Resolved version: ${version}"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"

  # ============================================
  # Linux x64
  # ============================================
  build-linux-x64:
    name: Build Linux x64
    runs-on: ubuntu-latest
    needs: prepare
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync SentencePiece source
        shell: bash
        run: |
          set -euo pipefail
          git submodule update --init --recursive "${SENTENCEPIECE_DIR}"
          pushd "${SENTENCEPIECE_DIR}"
          git fetch origin --tags
          git checkout "${VERSION}"
          popd

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Build SentencePiece
        shell: bash
        run: |
          set -euo pipefail
          BUILD_DIR="${SENTENCEPIECE_DIR}/build"
          rm -rf "${BUILD_DIR}"
          cmake -S "${SENTENCEPIECE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DSPM_ENABLE_SHARED=ON -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
          cmake --build "${BUILD_DIR}" --parallel $(nproc)

      - name: Prepare artifacts
        run: |
          set -euo pipefail
          mkdir -p artifacts/linux-x64/native
          copied=false
          while IFS= read -r file; do
            cp "$file" artifacts/linux-x64/native/
            copied=true
          done < <(find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece_c*.so*" -print)

          if [ "$copied" = false ]; then
            echo "❌ libsentencepiece_c not found in build output" >&2
            find "${SENTENCEPIECE_DIR}/build" -type f -name "*sentencepiece*"
            exit 1
          fi

          # Include canonical SentencePiece library for reference
          find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece.so*" -exec cp {} artifacts/linux-x64/native/ \; || true
          ls -lh artifacts/linux-x64/native/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sentencepiece-linux-x64
          path: artifacts/linux-x64/

  # ============================================
  # Windows x64
  # ============================================
  build-windows-x64:
    name: Build Windows x64
    runs-on: windows-latest
    needs: prepare
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync SentencePiece source
        shell: bash
        run: |
          set -euo pipefail
          git submodule update --init --recursive "${SENTENCEPIECE_DIR}"
          pushd "${SENTENCEPIECE_DIR}"
          git fetch origin --tags
          git checkout "${VERSION}"
          popd

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Build SentencePiece
        shell: pwsh
        run: |
          $source = Resolve-Path $env:SENTENCEPIECE_DIR
          $buildDir = Join-Path $source 'build'
          if (Test-Path $buildDir) { Remove-Item $buildDir -Recurse -Force }
          cmake -S $source -B $buildDir -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=$env:BUILD_SHARED_LIBS
          cmake --build $buildDir --config Release --parallel

      - name: Prepare artifacts
        shell: pwsh
        run: |
          $source = Resolve-Path $env:SENTENCEPIECE_DIR
          $buildDir = Join-Path $source 'build'
          New-Item -ItemType Directory -Force -Path artifacts/win-x64/native
          # Ensure the C facade is available
          $cFacade = @(Get-ChildItem -Path $buildDir -Recurse -Filter "sentencepiece_c*.dll" -ErrorAction SilentlyContinue)
          if ($cFacade.Count -eq 0) {
            Write-Host "❌ Error: sentencepiece_c DLL not found!"
            Get-ChildItem -Path $buildDir -Recurse -Filter "*.dll" | ForEach-Object {
              Write-Host "Available DLL: $($_.FullName)"
            }
            exit 1
          }

          $cFacade | ForEach-Object {
            Copy-Item $_.FullName artifacts/win-x64/native/
            Write-Host "✅ Copied facade: $($_.Name)"
          }

          # Ship the canonical SentencePiece DLL as well when available
          $coreDlls = @(Get-ChildItem -Path $buildDir -Recurse -Filter "sentencepiece.dll" -ErrorAction SilentlyContinue)
          $coreDlls | ForEach-Object {
            Copy-Item $_.FullName artifacts/win-x64/native/ -ErrorAction SilentlyContinue
          }
          Get-ChildItem artifacts/win-x64/native/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sentencepiece-win-x64
          path: artifacts/win-x64/

  # ============================================
  # macOS x64
  # ============================================
  build-macos-x64:
    name: Build macOS x64
    runs-on: macos-latest
    needs: prepare
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync SentencePiece source
        shell: bash
        run: |
          set -euo pipefail
          git submodule update --init --recursive "${SENTENCEPIECE_DIR}"
          pushd "${SENTENCEPIECE_DIR}"
          git fetch origin --tags
          git checkout "${VERSION}"
          popd

      - name: Install dependencies
        run: |
          brew install cmake

      - name: Build SentencePiece
        run: |
          set -euo pipefail
          BUILD_DIR="${SENTENCEPIECE_DIR}/build"
          rm -rf "${BUILD_DIR}"
          cmake -S "${SENTENCEPIECE_DIR}" -B "${BUILD_DIR}" \
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
            -DSPM_ENABLE_SHARED=ON \
            -DCMAKE_OSX_ARCHITECTURES=x86_64
          cmake --build "${BUILD_DIR}" --parallel $(sysctl -n hw.ncpu)

      - name: Prepare artifacts
        run: |
          set -euo pipefail
          mkdir -p artifacts/osx-x64/native
          copied=false
          while IFS= read -r file; do
            cp "$file" artifacts/osx-x64/native/
            copied=true
          done < <(find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece_c*.dylib" -print)

          if [ "$copied" = false ]; then
            echo "❌ libsentencepiece_c.dylib not found" >&2
            find "${SENTENCEPIECE_DIR}/build" -type f -name "*sentencepiece*"
            exit 1
          fi

          find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece.dylib" -exec cp {} artifacts/osx-x64/native/ \; || true
          ls -lh artifacts/osx-x64/native/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sentencepiece-osx-x64
          path: artifacts/osx-x64/

  # ============================================
  # macOS ARM64 (Apple Silicon)
  # ============================================
  build-macos-arm64:
    name: Build macOS ARM64
    runs-on: macos-latest
    needs: prepare
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync SentencePiece source
        shell: bash
        run: |
          set -euo pipefail
          git submodule update --init --recursive "${SENTENCEPIECE_DIR}"
          pushd "${SENTENCEPIECE_DIR}"
          git fetch origin --tags
          git checkout "${VERSION}"
          popd

      - name: Install dependencies
        run: |
          brew install cmake

      - name: Build SentencePiece
        run: |
          set -euo pipefail
          BUILD_DIR="${SENTENCEPIECE_DIR}/build"
          rm -rf "${BUILD_DIR}"
          cmake -S "${SENTENCEPIECE_DIR}" -B "${BUILD_DIR}" \
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
            -DSPM_ENABLE_SHARED=ON \
            -DCMAKE_OSX_ARCHITECTURES=arm64
          cmake --build "${BUILD_DIR}" --parallel $(sysctl -n hw.ncpu)

      - name: Prepare artifacts
        run: |
          set -euo pipefail
          mkdir -p artifacts/osx-arm64/native
          copied=false
          while IFS= read -r file; do
            cp "$file" artifacts/osx-arm64/native/
            copied=true
          done < <(find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece_c*.dylib" -print)

          if [ "$copied" = false ]; then
            echo "❌ libsentencepiece_c.dylib not found" >&2
            find "${SENTENCEPIECE_DIR}/build" -type f -name "*sentencepiece*"
            exit 1
          fi

          find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece.dylib" -exec cp {} artifacts/osx-arm64/native/ \; || true
          ls -lh artifacts/osx-arm64/native/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sentencepiece-osx-arm64
          path: artifacts/osx-arm64/

  # ============================================
  # Android ARM64
  # ============================================
  build-android-arm64:
    name: Build Android ARM64
    runs-on: ubuntu-latest
    needs: prepare
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync SentencePiece source
        shell: bash
        run: |
          set -euo pipefail
          git submodule update --init --recursive "${SENTENCEPIECE_DIR}"
          pushd "${SENTENCEPIECE_DIR}"
          git fetch origin --tags
          git checkout "${VERSION}"
          popd

      - name: Setup Android NDK
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip cmake
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip
          unzip -q android-ndk-r26d-linux.zip
          echo "ANDROID_NDK_HOME=$PWD/android-ndk-r26d" >> $GITHUB_ENV

      - name: Build SentencePiece
        run: |
          set -euo pipefail
          BUILD_DIR="${SENTENCEPIECE_DIR}/build"
          rm -rf "${BUILD_DIR}"
          cmake -S "${SENTENCEPIECE_DIR}" -B "${BUILD_DIR}" \
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
            -DSPM_ENABLE_SHARED=ON \
            -DCMAKE_SYSTEM_NAME=Android \
            -DCMAKE_SYSTEM_VERSION=21 \
            -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
            -DCMAKE_ANDROID_NDK=$ANDROID_NDK_HOME \
            -DCMAKE_ANDROID_STL_TYPE=c++_shared
          cmake --build "${BUILD_DIR}" --parallel $(nproc)

      - name: Prepare artifacts
        run: |
          set -euo pipefail
          mkdir -p artifacts/android-arm64/native
          copied=false
          while IFS= read -r file; do
            cp "$file" artifacts/android-arm64/native/
            copied=true
          done < <(find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece_c*.so" -print)

          if [ "$copied" = false ]; then
            echo "❌ libsentencepiece_c.so not found" >&2
            find "${SENTENCEPIECE_DIR}/build" -type f -name "*sentencepiece*"
            exit 1
          fi

          find "${SENTENCEPIECE_DIR}/build" -type f -name "libsentencepiece.so" -exec cp {} artifacts/android-arm64/native/ \; || true
          ls -lh artifacts/android-arm64/native/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sentencepiece-android-arm64
          path: artifacts/android-arm64/
